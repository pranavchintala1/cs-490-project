{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jonat\\\\Documents\\\\CS490\\\\ProjectGit\\\\cs-490-project\\\\frontend\\\\src\\\\certifications\\\\CertificationList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CertificationForm from \"./CertificationForm\";\nimport CertificationCard from \"./CertificationCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL + \"/certifications/\";\nexport default function CertificationList() {\n  _s();\n  const [certs, setCerts] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const fetchCerts = async () => {\n    const res = await fetch(`${API_URL}/?user_id=temp_user`);\n    const data = await res.json();\n    setCerts(data || []);\n  };\n  useEffect(() => {\n    fetchCerts();\n  }, []);\n  const addCert = async formData => {\n    const res = await fetch(API_URL, {\n      method: \"POST\",\n      body: formData\n    });\n    const added = await res.json();\n    setCerts([...certs, added]);\n  };\n  const deleteCert = async id => {\n    if (!window.confirm(\"Delete certification?\")) return;\n    await fetch(`${API_URL}/${id}?user_id=temp_user`, {\n      method: \"DELETE\"\n    });\n    setCerts(certs.filter(c => c.id !== id));\n  };\n  const toggleVerified = async cert => {\n    const updated = {\n      ...cert,\n      verified: !cert.verified\n    };\n    await fetch(`${API_URL}/${cert.id}?user_id=temp_user`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updated)\n    });\n    setCerts(certs.map(c => c.id === cert.id ? updated : c));\n  };\n  const filtered = certs.filter(c => {\n    var _c$issuer, _c$name;\n    return ((_c$issuer = c.issuer) === null || _c$issuer === void 0 ? void 0 : _c$issuer.toLowerCase().includes(search.toLowerCase())) || ((_c$name = c.name) === null || _c$name === void 0 ? void 0 : _c$name.toLowerCase().includes(search.toLowerCase()));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Certifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CertificationForm, {\n      addCert: addCert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Search by name/issuer...\",\n      value: search,\n      onChange: e => setSearch(e.target.value),\n      style: {\n        margin: \"10px 0\",\n        padding: \"4px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), filtered.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No certifications found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 33\n    }, this), filtered.map(cert => /*#__PURE__*/_jsxDEV(CertificationCard, {\n      cert: cert,\n      onDelete: deleteCert,\n      onToggleVerified: toggleVerified\n    }, cert.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(CertificationList, \"Ul8oqUXPJKqdXBp6TAaf1g1zmKk=\");\n_c = CertificationList;\nvar _c;\n$RefreshReg$(_c, \"CertificationList\");","map":{"version":3,"names":["React","useEffect","useState","CertificationForm","CertificationCard","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","CertificationList","_s","certs","setCerts","search","setSearch","fetchCerts","res","fetch","data","json","addCert","formData","method","body","added","deleteCert","id","window","confirm","filter","c","toggleVerified","cert","updated","verified","headers","JSON","stringify","map","filtered","_c$issuer","_c$name","issuer","toLowerCase","includes","name","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","style","margin","padding","length","onDelete","onToggleVerified","_c","$RefreshReg$"],"sources":["C:/Users/jonat/Documents/CS490/ProjectGit/cs-490-project/frontend/src/certifications/CertificationList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport CertificationForm from \"./CertificationForm\";\r\nimport CertificationCard from \"./CertificationCard\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL + \"/certifications/\";\r\n\r\nexport default function CertificationList() {\r\n  const [certs, setCerts] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const fetchCerts = async () => {\r\n    const res = await fetch(`${API_URL}/?user_id=temp_user`);\r\n    const data = await res.json();\r\n    setCerts(data || []);\r\n  };\r\n\r\n  useEffect(() => { fetchCerts(); }, []);\r\n\r\n  const addCert = async (formData) => {\r\n    const res = await fetch(API_URL, { method: \"POST\", body: formData });\r\n    const added = await res.json();\r\n    setCerts([...certs, added]);\r\n  };\r\n\r\n  const deleteCert = async (id) => {\r\n    if (!window.confirm(\"Delete certification?\")) return;\r\n    await fetch(`${API_URL}/${id}?user_id=temp_user`, { method: \"DELETE\" });\r\n    setCerts(certs.filter(c => c.id !== id));\r\n  };\r\n\r\n  const toggleVerified = async (cert) => {\r\n    const updated = { ...cert, verified: !cert.verified };\r\n    await fetch(`${API_URL}/${cert.id}?user_id=temp_user`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(updated),\r\n    });\r\n    setCerts(certs.map(c => c.id === cert.id ? updated : c));\r\n  };\r\n\r\n  const filtered = certs.filter(c =>\r\n    c.issuer?.toLowerCase().includes(search.toLowerCase()) ||\r\n    c.name?.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h2>Certifications</h2>\r\n\r\n      <CertificationForm addCert={addCert} />\r\n\r\n      <input\r\n        placeholder=\"Search by name/issuer...\"\r\n        value={search}\r\n        onChange={e => setSearch(e.target.value)}\r\n        style={{ margin: \"10px 0\", padding: \"4px\" }}\r\n      />\r\n\r\n      {filtered.length === 0 && <p>No certifications found.</p>}\r\n\r\n      {filtered.map(cert => (\r\n        <CertificationCard\r\n          key={cert.id}\r\n          cert={cert}\r\n          onDelete={deleteCert}\r\n          onToggleVerified={toggleVerified}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}