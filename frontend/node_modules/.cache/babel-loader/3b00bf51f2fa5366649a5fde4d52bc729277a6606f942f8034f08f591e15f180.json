{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jonat\\\\Documents\\\\CS490\\\\ProjectGit\\\\cs-490-project\\\\frontend\\\\src\\\\certifications\\\\CertificationList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CertificationForm from \"./CertificationForm\";\nimport CertificationCard from \"./CertificationCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL + \"/certifications\";\nexport default function CertificationList() {\n  _s();\n  const [certs, setCerts] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const fetchCerts = async () => {\n    const res = await fetch(`${API_URL}?user_id=temp_user`);\n    const data = await res.json();\n    setCerts(data || []);\n  };\n  useEffect(() => {\n    fetchCerts();\n  }, []);\n  const addCert = async formData => {\n    formData.append(\"user_id\", \"temp_user\");\n    const res = await fetch(API_URL, {\n      method: \"POST\",\n      body: formData\n    });\n    const added = await res.json();\n    setCerts([...certs, added]);\n  };\n  const deleteCert = async id => {\n    if (!window.confirm(\"Delete this certification?\")) return;\n    await fetch(`${API_URL}/${id}?user_id=temp_user`, {\n      method: \"DELETE\"\n    });\n    setCerts(certs.filter(c => c.id !== id));\n  };\n  const filteredCerts = certs.filter(c => {\n    var _c$issuer;\n    return (_c$issuer = c.issuer) === null || _c$issuer === void 0 ? void 0 : _c$issuer.toLowerCase().includes(search.toLowerCase());\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Certifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CertificationForm, {\n      addCert: addCert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Search by issuer...\",\n      value: search,\n      onChange: e => setSearch(e.target.value),\n      style: {\n        margin: \"8px 0\",\n        padding: \"4px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), filteredCerts.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No certifications found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 38\n    }, this), filteredCerts.map(c => /*#__PURE__*/_jsxDEV(CertificationCard, {\n      cert: c,\n      onDelete: deleteCert\n    }, c.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(CertificationList, \"Ul8oqUXPJKqdXBp6TAaf1g1zmKk=\");\n_c = CertificationList;\nvar _c;\n$RefreshReg$(_c, \"CertificationList\");","map":{"version":3,"names":["React","useEffect","useState","CertificationForm","CertificationCard","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","CertificationList","_s","certs","setCerts","search","setSearch","fetchCerts","res","fetch","data","json","addCert","formData","append","method","body","added","deleteCert","id","window","confirm","filter","c","filteredCerts","_c$issuer","issuer","toLowerCase","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","style","margin","padding","length","map","cert","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/jonat/Documents/CS490/ProjectGit/cs-490-project/frontend/src/certifications/CertificationList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport CertificationForm from \"./CertificationForm\";\r\nimport CertificationCard from \"./CertificationCard\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL + \"/certifications\";\r\n\r\nexport default function CertificationList() {\r\n  const [certs, setCerts] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const fetchCerts = async () => {\r\n    const res = await fetch(`${API_URL}?user_id=temp_user`);\r\n    const data = await res.json();\r\n    setCerts(data || []);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCerts();\r\n  }, []);\r\n\r\n  const addCert = async (formData) => {\r\n    formData.append(\"user_id\", \"temp_user\"); \r\n    const res = await fetch(API_URL, { method: \"POST\", body: formData });\r\n    const added = await res.json();\r\n    setCerts([...certs, added]);\r\n  };\r\n\r\n  const deleteCert = async (id) => {\r\n    if (!window.confirm(\"Delete this certification?\")) return;\r\n    await fetch(`${API_URL}/${id}?user_id=temp_user`, { method: \"DELETE\" });\r\n    setCerts(certs.filter((c) => c.id !== id));\r\n  };\r\n\r\n  const filteredCerts = certs.filter((c) =>\r\n    c.issuer?.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h2>Certifications</h2>\r\n      <CertificationForm addCert={addCert} />\r\n      <input\r\n        placeholder=\"Search by issuer...\"\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n        style={{ margin: \"8px 0\", padding: \"4px\" }}\r\n      />\r\n      {filteredCerts.length === 0 && <p>No certifications found</p>}\r\n      {filteredCerts.map((c) => (\r\n        <CertificationCard key={c.id} cert={c} onDelete={deleteCert} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}