{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jonat\\\\Documents\\\\CS490\\\\ProjectGit\\\\cs-490-project\\\\frontend\\\\src\\\\projects\\\\ProjectList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ProjectForm from \"./ProjectForm\";\nimport ProjectCard from \"./ProjectCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL + \"/projects\";\nexport default function ProjectsList() {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [industrySearch, setIndustrySearch] = useState(\"\"); // simple text search for industry\n  const [statusFilter, setStatusFilter] = useState(\"\"); // dropdown filter for status\n  const [sort, setSort] = useState(\"\"); // sort by date\n\n  const fetchProjects = async () => {\n    const res = await fetch(`${API_URL}/?user_id=temp_user`);\n    const data = await res.json();\n    setProjects(data || []);\n  };\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n  const addProject = async formData => {\n    formData.append(\"user_id\", \"temp_user\");\n    const res = await fetch(`${API_URL}/`, {\n      method: \"POST\",\n      body: formData\n    });\n    const newProject = await res.json();\n    setProjects(prev => [...prev, newProject]);\n  };\n  const deleteProject = async id => {\n    if (!window.confirm(\"Delete this project?\")) return;\n    await fetch(`${API_URL}/${id}/?user_id=temp_user`, {\n      method: \"DELETE\"\n    });\n    setProjects(prev => prev.filter(p => p.id !== id));\n  };\n\n  // Filter and sort projects\n  const filteredProjects = projects.filter(p => {\n    var _p$industry_type;\n    return industrySearch ? (_p$industry_type = p.industry_type) === null || _p$industry_type === void 0 ? void 0 : _p$industry_type.toLowerCase().includes(industrySearch.toLowerCase()) : true;\n  }).filter(p => statusFilter ? p.status === statusFilter : true).sort((a, b) => {\n    if (sort === \"date_desc\") return new Date(b.start_date) - new Date(a.start_date);\n    if (sort === \"date_asc\") return new Date(a.start_date) - new Date(b.start_date);\n    return 0;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Special Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProjectForm, {\n      addProject: addProject\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"10px\",\n        margin: \"12px 0\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Search by Industry...\",\n        value: industrySearch,\n        onChange: e => setIndustrySearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: statusFilter,\n        onChange: e => setStatusFilter(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"All Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Planned\",\n          children: \"Planned\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Ongoing\",\n          children: \"Ongoing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Completed\",\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: sort,\n        onChange: e => setSort(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Sort\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"date_desc\",\n          children: \"Newest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"date_asc\",\n          children: \"Oldest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-grid\",\n      children: filteredProjects.map(p => /*#__PURE__*/_jsxDEV(ProjectCard, {\n        project: p,\n        deleteProject: deleteProject\n      }, p.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(ProjectsList, \"An2iGCgK/4Zh8BeR7SfijnOzIMY=\");\n_c = ProjectsList;\nvar _c;\n$RefreshReg$(_c, \"ProjectsList\");","map":{"version":3,"names":["React","useEffect","useState","ProjectForm","ProjectCard","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","ProjectsList","_s","projects","setProjects","industrySearch","setIndustrySearch","statusFilter","setStatusFilter","sort","setSort","fetchProjects","res","fetch","data","json","addProject","formData","append","method","body","newProject","prev","deleteProject","id","window","confirm","filter","p","filteredProjects","_p$industry_type","industry_type","toLowerCase","includes","status","a","b","Date","start_date","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gap","margin","placeholder","value","onChange","e","target","className","map","project","_c","$RefreshReg$"],"sources":["C:/Users/jonat/Documents/CS490/ProjectGit/cs-490-project/frontend/src/projects/ProjectList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ProjectForm from \"./ProjectForm\";\r\nimport ProjectCard from \"./ProjectCard\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL + \"/projects\";\r\n\r\nexport default function ProjectsList() {\r\n  const [projects, setProjects] = useState([]);\r\n  const [industrySearch, setIndustrySearch] = useState(\"\"); // simple text search for industry\r\n  const [statusFilter, setStatusFilter] = useState(\"\");     // dropdown filter for status\r\n  const [sort, setSort] = useState(\"\");                     // sort by date\r\n\r\n  const fetchProjects = async () => {\r\n    const res = await fetch(`${API_URL}/?user_id=temp_user`);\r\n    const data = await res.json();\r\n    setProjects(data || []);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchProjects();\r\n  }, []);\r\n\r\n  const addProject = async (formData) => {\r\n    formData.append(\"user_id\", \"temp_user\");\r\n    const res = await fetch(`${API_URL}/`, { method: \"POST\", body: formData });\r\n    const newProject = await res.json();\r\n    setProjects((prev) => [...prev, newProject]);\r\n  };\r\n\r\n  const deleteProject = async (id) => {\r\n    if (!window.confirm(\"Delete this project?\")) return;\r\n    await fetch(`${API_URL}/${id}/?user_id=temp_user`, { method: \"DELETE\" });\r\n    setProjects((prev) => prev.filter((p) => p.id !== id));\r\n  };\r\n\r\n  // Filter and sort projects\r\n  const filteredProjects = projects\r\n    .filter((p) =>\r\n      industrySearch\r\n        ? p.industry_type?.toLowerCase().includes(industrySearch.toLowerCase())\r\n        : true\r\n    )\r\n    .filter((p) => (statusFilter ? p.status === statusFilter : true))\r\n    .sort((a, b) => {\r\n      if (sort === \"date_desc\") return new Date(b.start_date) - new Date(a.start_date);\r\n      if (sort === \"date_asc\") return new Date(a.start_date) - new Date(b.start_date);\r\n      return 0;\r\n    });\r\n\r\n  return (\r\n    <div>\r\n      <h2>Special Projects</h2>\r\n      <ProjectForm addProject={addProject} />\r\n\r\n      <div style={{ display: \"flex\", gap: \"10px\", margin: \"12px 0\" }}>\r\n        {/* Industry search input */}\r\n        <input\r\n          placeholder=\"Search by Industry...\"\r\n          value={industrySearch}\r\n          onChange={(e) => setIndustrySearch(e.target.value)}\r\n        />\r\n\r\n        {/* Status filter dropdown */}\r\n        <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>\r\n          <option value=\"\">All Status</option>\r\n          <option value=\"Planned\">Planned</option>\r\n          <option value=\"Ongoing\">Ongoing</option>\r\n          <option value=\"Completed\">Completed</option>\r\n        </select>\r\n\r\n        {/* Sorting */}\r\n        <select value={sort} onChange={(e) => setSort(e.target.value)}>\r\n          <option value=\"\">Sortâ€¦</option>\r\n          <option value=\"date_desc\">Newest</option>\r\n          <option value=\"date_asc\">Oldest</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"project-grid\">\r\n        {filteredProjects.map((p) => (\r\n          <ProjectCard key={p.id} project={p} deleteProject={deleteProject} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}