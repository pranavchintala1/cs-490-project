{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jonat\\\\Documents\\\\CS490\\\\ProjectGit\\\\cs-490-project\\\\frontend\\\\src\\\\certifications\\\\CertificationList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CertificationForm from \"./CertificationForm\";\nimport CertificationCard from \"./CertificationCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL + \"/certifications/\";\nexport default function CertificationList() {\n  _s();\n  const [certs, setCerts] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const fetchCerts = async () => {\n    const res = await fetch(API_URL);\n    const data = await res.json();\n    setCerts(data || []);\n  };\n  useEffect(() => {\n    fetchCerts();\n  }, []);\n  const addCert = async formData => {\n    const res = await fetch(API_URL, {\n      method: \"POST\",\n      body: formData\n    });\n    const added = await res.json();\n    setCerts(prev => [...prev, added]);\n  };\n  const deleteCert = async id => {\n    if (!window.confirm(\"Delete this certification?\")) return;\n    await fetch(`${API_URL}${id}`, {\n      method: \"DELETE\"\n    });\n    setCerts(prev => prev.filter(c => c.id !== id));\n  };\n  const filteredCerts = certs.filter(c => {\n    var _c$issuer;\n    return (_c$issuer = c.issuer) === null || _c$issuer === void 0 ? void 0 : _c$issuer.toLowerCase().includes(search.toLowerCase());\n  });\n\n  // Sort: expired → about-to-expire → others\n  const sortedCerts = [...filteredCerts].sort((a, b) => {\n    const today = new Date();\n    const getStatus = cert => {\n      if (!cert.expiration_date || cert.does_not_expire) return 2;\n      const diff = (new Date(cert.expiration_date) - today) / (1000 * 60 * 60 * 24);\n      if (diff < 0) return 0; // expired\n      if (diff <= 90) return 1; // about to expire\n      return 2; // others\n    };\n    return getStatus(a) - getStatus(b);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Certifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CertificationForm, {\n      addCert: addCert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Search by issuer...\",\n      value: search,\n      onChange: e => setSearch(e.target.value),\n      style: {\n        margin: \"8px 0\",\n        padding: \"4px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), sortedCerts.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No certifications found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 36\n    }, this), sortedCerts.map(c => /*#__PURE__*/_jsxDEV(CertificationCard, {\n      cert: c,\n      onDelete: deleteCert\n    }, c.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(CertificationList, \"Ul8oqUXPJKqdXBp6TAaf1g1zmKk=\");\n_c = CertificationList;\nvar _c;\n$RefreshReg$(_c, \"CertificationList\");","map":{"version":3,"names":["React","useEffect","useState","CertificationForm","CertificationCard","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","CertificationList","_s","certs","setCerts","search","setSearch","fetchCerts","res","fetch","data","json","addCert","formData","method","body","added","prev","deleteCert","id","window","confirm","filter","c","filteredCerts","_c$issuer","issuer","toLowerCase","includes","sortedCerts","sort","a","b","today","Date","getStatus","cert","expiration_date","does_not_expire","diff","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","style","margin","padding","length","map","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/jonat/Documents/CS490/ProjectGit/cs-490-project/frontend/src/certifications/CertificationList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport CertificationForm from \"./CertificationForm\";\r\nimport CertificationCard from \"./CertificationCard\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL + \"/certifications/\";\r\n\r\nexport default function CertificationList() {\r\n  const [certs, setCerts] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const fetchCerts = async () => {\r\n    const res = await fetch(API_URL);\r\n    const data = await res.json();\r\n    setCerts(data || []);\r\n  };\r\n\r\n  useEffect(() => { fetchCerts(); }, []);\r\n\r\n  const addCert = async (formData) => {\r\n    const res = await fetch(API_URL, { method: \"POST\", body: formData });\r\n    const added = await res.json();\r\n    setCerts(prev => [...prev, added]);\r\n  };\r\n\r\n  const deleteCert = async (id) => {\r\n    if (!window.confirm(\"Delete this certification?\")) return;\r\n    await fetch(`${API_URL}${id}`, { method: \"DELETE\" });\r\n    setCerts(prev => prev.filter(c => c.id !== id));\r\n  };\r\n\r\n  const filteredCerts = certs.filter(c => c.issuer?.toLowerCase().includes(search.toLowerCase()));\r\n\r\n  // Sort: expired → about-to-expire → others\r\n  const sortedCerts = [...filteredCerts].sort((a, b) => {\r\n    const today = new Date();\r\n    const getStatus = cert => {\r\n      if (!cert.expiration_date || cert.does_not_expire) return 2;\r\n      const diff = (new Date(cert.expiration_date) - today) / (1000 * 60 * 60 * 24);\r\n      if (diff < 0) return 0;       // expired\r\n      if (diff <= 90) return 1;     // about to expire\r\n      return 2;                     // others\r\n    };\r\n    return getStatus(a) - getStatus(b);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h2>Certifications</h2>\r\n      <CertificationForm addCert={addCert} />\r\n      <input\r\n        placeholder=\"Search by issuer...\"\r\n        value={search}\r\n        onChange={e => setSearch(e.target.value)}\r\n        style={{ margin: \"8px 0\", padding: \"4px\" }}\r\n      />\r\n      {sortedCerts.length === 0 && <p>No certifications found</p>}\r\n      {sortedCerts.map(c => (\r\n        <CertificationCard key={c.id} cert={c} onDelete={deleteCert} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}